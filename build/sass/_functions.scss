/*
Extra functions.

@since 0.1.0
*/

// Allow hex color to be passed into a Data URI
@function uri-friendly-color( $color ) {
	@return '%23' + str-slice( '#{$color}', 2, -1 );
}

// map-get down multiple levels without making nested map-gets manually
@function map-get-deep( $map, $keys... ) {

	@each $key in $keys {
		$map: map-get( $map, $key );
	}

	@return $map;

}

// I guess these got removed from Foundation? Super useful stuff.
@function lower-bound( $range ) {

	@if ( length( $range ) <= 0 ) {
		@return 0;
	}

	@return nth( $range, 1 );

}

@function upper-bound( $range ) {

	@if ( length( $range ) < 2 ) {
		@return 999999999999;
	}

	@return nth( $range, 2 );

}

@function str-split( $string, $separator ) {

	// empty array/list
	$split-arr: ();

	// first index of separator in string
	$index: str-index( $string, $separator );

	// loop through string
	@while $index != null {

		// get the substring from the first character to the separator
		$item: str-slice( $string, 1, $index - 1 );

		// push item to array
		$split-arr: append( $split-arr, $item );

		// remove item and separator from string
		$string: str-slice( $string, $index + 1 );

		// find new index of separator
		$index: str-index( $string, $separator );

	}

	// add the remaining string to list (the last item)
	$split-arr: append( $split-arr, $string );

	@return $split-arr;

}

// Sass has a way to cast from Number to String via inspect(), but not the other way around
@function to-number( $value ) {

	@if type-of( $value ) == 'number' {
		@return $value;
	} @else if type-of( $value ) != 'string' {
		$_: log( 'Value for `to-number` should be a number or a string.' );
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice( $value, 1, 1 ) == '-';
	$numbers: ( '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9 );

	@for $i from if( $minus, 2, 1 ) through str-length( $value ) {
		$character: str-slice( $value, $i, $i );

		@if not ( index( map-keys( $numbers ), $character ) or $character == '.' ) {
			@return to-length( if( $minus, -$result, $result), str-slice( $value, $i ) );
		}

		@if $character == '.' {
			$digits: 1; 
		} @else if $digits == 0 {
			$result: $result * 10 + map-get( $numbers, $character );
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get( $numbers, $character ) / $digits;
		}

	}

	@return if( $minus, -$result, $result );

}

// Re-adds the appropriate Unit when converting a String to a Number
// Somehow Numbers can have String Units in Sass. Makes no sense to me either. Always figured things like "padding: 1rem" were Strings
@function to-length( $value, $unit ) {

	$units: ( 'px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax );

	@if not index( map-keys( $units ), $unit ) {
		$_: log('Invalid unit `#{$unit}`.');
	}

	@return $value * map-get( $units, $unit );

}